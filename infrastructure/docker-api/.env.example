# GeoIP Docker API Configuration Template
# Copy this file to .env and update with your values

# ============================================
# API Configuration
# ============================================
# Comma-separated list of allowed API keys (REQUIRED)
# Generate secure, random API keys for production use
API_KEYS=your-key-1,your-key-2,your-key-3

# ============================================
# Storage Configuration
# ============================================
# Storage mode: s3, local, or hybrid
# - s3: Use S3 pre-signed URLs (requires AWS credentials or IAM role)
# - local: Serve files directly from mounted volume (requires database files)
# - hybrid: Try local first, fallback to S3 (recommended for production)
STORAGE_MODE=hybrid

# ============================================
# S3 Configuration (for s3/hybrid modes)
# ============================================
# S3 bucket containing GeoIP databases
S3_BUCKET=your-geoip-bucket

# AWS credentials (optional - uses IAM role/instance profile if not provided)
# For production, prefer IAM roles over hardcoded credentials
# AWS_ACCESS_KEY_ID=your-access-key-id
# AWS_SECRET_ACCESS_KEY=your-secret-access-key

# AWS region where your S3 bucket is located
AWS_REGION=us-east-1

# Pre-signed URL expiry time in seconds (default: 1 hour)
# Shorter times are more secure but may cause issues with slow downloads
URL_EXPIRY_SECONDS=3600

# ============================================
# Local Storage Configuration (for local/hybrid modes)
# ============================================
# Path to local GeoIP database files
# In Docker: this is the container path, mount your host directory here
LOCAL_DATA_PATH=/data/databases

# Path for storing downloaded databases (usually same as LOCAL_DATA_PATH)
DATABASE_PATH=/data/databases

# ============================================
# Server Configuration
# ============================================
# Server port (container internal port)
# External port is configured in Docker Compose or deployment
PORT=8080

# Number of worker processes
# For production: set to number of CPU cores (e.g., 4)
WORKERS=1

# Debug mode (enables hot reload and verbose errors)
# NEVER set to true in production
DEBUG=false

# ============================================
# Admin Configuration
# ============================================
# Enable admin endpoints for key management and operations
# Disable in production if not needed
ENABLE_ADMIN=false

# Admin API key (REQUIRED if ENABLE_ADMIN=true)
# Use a strong, unique key different from regular API keys
# ADMIN_KEY=your-secure-admin-key

# ============================================
# Logging Configuration
# ============================================
# Log level: DEBUG, INFO, WARNING, ERROR, CRITICAL
# Use INFO or WARNING for production
LOG_LEVEL=INFO

# ============================================
# Query and Caching Configuration
# ============================================
# Cache type: memory, redis, sqlite, or none
# - memory: Fast but lost on restart (good for single instance)
# - redis: Shared cache for multiple instances (requires Redis server)
# - sqlite: Persistent local cache (good for single instance)
# - none: No caching (not recommended for production)
CACHE_TYPE=memory

# Redis connection URL (REQUIRED if CACHE_TYPE=redis)
# Example: redis://redis-server:6379/0 or redis://user:pass@host:port/db
# REDIS_URL=redis://localhost:6379

# Cache TTL in seconds (optional)
# If not set, defaults to cache until next Monday 4am (weekly refresh)
# CACHE_TTL=86400

# Maximum number of IP addresses allowed per query
# Prevents abuse and controls resource usage
QUERY_RATE_LIMIT=50

# ============================================
# Session Configuration
# ============================================
# Secret key for signing session cookies
# MUST be changed in production - use a long, random string
# Generate with: openssl rand -hex 32
SESSION_SECRET_KEY=your-secret-session-key-change-in-production

# ============================================
# Database Update Configuration
# ============================================
# Cron schedule for automatic database updates
# Format: minute hour day month day_of_week
# Default: Monday 4am UTC (0 4 * * 1)
DATABASE_UPDATE_SCHEDULE=0 4 * * 1

# ============================================
# Production Deployment Notes
# ============================================
# For production deployment:
# 1. Use environment-specific values for all variables
# 2. Use IAM roles instead of hardcoded AWS credentials
# 3. Set DEBUG=false and appropriate LOG_LEVEL
# 4. Use strong, unique keys for API_KEYS, ADMIN_KEY, SESSION_SECRET_KEY
# 5. Consider using Redis for CACHE_TYPE in multi-instance deployments
# 6. Monitor DATABASE_UPDATE_SCHEDULE for your timezone needs
# 7. Adjust WORKERS based on your server's CPU cores
# 8. Use STORAGE_MODE=hybrid for best performance and reliability