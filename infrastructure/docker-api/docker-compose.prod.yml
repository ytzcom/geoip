# Production configuration with hybrid backend and reverse proxy
services:
  geoip-api:
    image: ytzcom/geoip-api:latest
    container_name: geoip-api
    restart: always
    expose:
      - "8080"
    environment:
      # API Configuration
      - API_KEYS=${API_KEYS}
      
      # Storage Configuration - Hybrid mode for production (better performance)
      - STORAGE_MODE=${STORAGE_MODE:-hybrid}
      
      # S3 Configuration (for s3/hybrid modes)
      - S3_BUCKET=${S3_BUCKET:-ytz-geoip}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - URL_EXPIRY_SECONDS=${URL_EXPIRY_SECONDS:-3600}
      
      # Local Storage Configuration (for local/hybrid modes)
      - LOCAL_DATA_PATH=/data/databases
      - DATABASE_PATH=/data/databases
      
      # Query and Caching Configuration
      - CACHE_TYPE=${CACHE_TYPE:-redis}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - CACHE_TTL=${CACHE_TTL}
      - QUERY_RATE_LIMIT=${QUERY_RATE_LIMIT:-50}
      
      # Session Configuration
      - SESSION_SECRET_KEY=${SESSION_SECRET_KEY}
      
      # Database Update Configuration
      - DATABASE_UPDATE_SCHEDULE=${DATABASE_UPDATE_SCHEDULE:-0 4 * * 1}
      
      # Server Configuration
      - WORKERS=${WORKERS:-4}
      - DEBUG=false
      
      # Admin Configuration
      - ENABLE_ADMIN=${ENABLE_ADMIN:-true}
      - ADMIN_KEY=${ADMIN_KEY}
      
      # Logging
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    
    volumes:
      # Volume for database persistence (hybrid mode caching)
      - geoip-databases:/data/databases
    
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8080/health').raise_for_status()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    
    depends_on:
      - redis
    
    networks:
      - geoip-network
    
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "10"
  
  # Redis service for caching
  redis:
    image: redis:7-alpine
    container_name: geoip-redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --maxmemory 512mb --maxmemory-policy allkeys-lru
    networks:
      - geoip-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: geoip-nginx
    restart: always
    ports:
      - "${EXTERNAL_PORT:-80}:80"
      - "${EXTERNAL_SSL_PORT:-443}:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx-cache:/var/cache/nginx
    depends_on:
      - geoip-api
    networks:
      - geoip-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  geoip-network:
    driver: bridge

volumes:
  geoip-databases:
    driver: local
  redis-data:
    driver: local
  nginx-cache: