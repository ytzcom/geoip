#!/bin/sh
# Setup cron/supercronic for periodic GeoIP updates
# Supports multiple cron implementations:
# - supercronic (Docker containers)
# - crond (Alpine/BusyBox)
# - cron (Debian/Ubuntu)
# - systemd timers (host systems)
#
# Environment variables:
#   GEOIP_UPDATE_SCHEDULE - Cron schedule (default: "0 2 * * *" - 2 AM daily)
#   GEOIP_API_KEY - API key for authentication
#   GEOIP_TARGET_DIR - Where to store databases
#   GEOIP_LOG_FILE - Log file for cron output

set -e

# Configuration
GEOIP_UPDATE_SCHEDULE="${GEOIP_UPDATE_SCHEDULE:-0 2 * * *}"
GEOIP_API_KEY="${GEOIP_API_KEY}"
GEOIP_API_ENDPOINT="${GEOIP_API_ENDPOINT:-https://geoipdb.net/auth}"
GEOIP_TARGET_DIR="${GEOIP_TARGET_DIR:-/app/resources/geoip}"
CRON_LOG_FILE="${GEOIP_LOG_FILE:-/var/log/geoip-update.log}"
GEOIP_DATABASES="${GEOIP_DATABASES:-all}"

# Check if API key is configured
if [ -z "$GEOIP_API_KEY" ]; then
    echo "[Setup] ERROR: GEOIP_API_KEY not configured!"
    echo "[Setup] Automatic updates cannot be configured without an API key"
    exit 1
fi

# Create log file if it doesn't exist
mkdir -p "$(dirname "$CRON_LOG_FILE")" 2>/dev/null || true
touch "$CRON_LOG_FILE" 2>/dev/null || true

# Build the cron command with proper escaping
CRON_CMD="/opt/geoip/geoip-update.sh --api-key '$GEOIP_API_KEY' --endpoint '$GEOIP_API_ENDPOINT' --directory '$GEOIP_TARGET_DIR' --quiet"

if [ "$GEOIP_DATABASES" != "all" ]; then
    CRON_CMD="$CRON_CMD --databases '$GEOIP_DATABASES'"
fi

# Add logging if log file is writable
if [ -w "$CRON_LOG_FILE" ] || [ -w "$(dirname "$CRON_LOG_FILE")" ]; then
    CRON_CMD="$CRON_CMD >> $CRON_LOG_FILE 2>&1"
fi

echo "[Setup] Configuring GeoIP automatic updates..."
echo "[Setup] Schedule: $GEOIP_UPDATE_SCHEDULE"
echo "[Setup] Target directory: $GEOIP_TARGET_DIR"
echo "[Setup] Log file: $CRON_LOG_FILE"

# Function to test if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Detect and setup appropriate cron system
cron_configured=false

# Option 1: Supercronic (common in Docker containers, runs as non-root)
if command_exists supercronic && [ "$cron_configured" = "false" ]; then
    echo "[Setup] Detected supercronic..."
    
    # Create crontab file for supercronic
    # Try system location first, fallback to user location
    CRONTAB_FILE="/etc/geoip-crontab"
    if ! touch "$CRONTAB_FILE" 2>/dev/null; then
        CRONTAB_FILE="$HOME/.geoip-crontab"
        mkdir -p "$HOME" 2>/dev/null || true
        echo "[Setup] Using user crontab location: $CRONTAB_FILE"
    fi
    echo "# GeoIP Database Update Schedule" > "$CRONTAB_FILE"
    echo "# Generated by setup-cron.sh" >> "$CRONTAB_FILE"
    echo "$GEOIP_UPDATE_SCHEDULE $CRON_CMD" >> "$CRONTAB_FILE"
    
    # Check if supercronic is already running
    if pgrep supercronic >/dev/null 2>&1; then
        echo "[Setup] Supercronic already running, reloading..."
        pkill -HUP supercronic || true
    else
        echo "[Setup] Starting supercronic in background..."
        supercronic "$CRONTAB_FILE" > /dev/null 2>&1 &
    fi
    
    echo "[Setup] ✅ Supercronic configured and started"
    cron_configured=true
fi

# Option 2: Alpine/BusyBox crond
if command_exists crond && [ "$cron_configured" = "false" ]; then
    echo "[Setup] Detected crond (Alpine/BusyBox)..."
    
    # Create or update crontab
    TEMP_CRON=$(mktemp)
    
    # Get existing crontab if any (ignore errors)
    crontab -l 2>/dev/null > "$TEMP_CRON" || true
    
    # Remove any existing GeoIP entries
    grep -v "geoip-update.sh" "$TEMP_CRON" > "${TEMP_CRON}.new" || true
    mv "${TEMP_CRON}.new" "$TEMP_CRON"
    
    # Add new entry
    echo "# GeoIP Database Update" >> "$TEMP_CRON"
    echo "$GEOIP_UPDATE_SCHEDULE $CRON_CMD" >> "$TEMP_CRON"
    
    # Install new crontab
    crontab "$TEMP_CRON"
    rm -f "$TEMP_CRON"
    
    # Start crond if not running
    if ! pgrep crond >/dev/null 2>&1; then
        echo "[Setup] Starting crond..."
        crond -b -l 8
    else
        echo "[Setup] Crond already running"
    fi
    
    echo "[Setup] ✅ Crond configured and started"
    cron_configured=true
fi

# Option 3: Debian/Ubuntu cron
if command_exists cron && [ "$cron_configured" = "false" ]; then
    echo "[Setup] Detected cron (Debian/Ubuntu)..."
    
    # Create or update crontab
    TEMP_CRON=$(mktemp)
    
    # Get existing crontab if any (ignore errors)
    crontab -l 2>/dev/null > "$TEMP_CRON" || true
    
    # Remove any existing GeoIP entries
    grep -v "geoip-update.sh" "$TEMP_CRON" > "${TEMP_CRON}.new" || true
    mv "${TEMP_CRON}.new" "$TEMP_CRON"
    
    # Add new entry
    echo "# GeoIP Database Update" >> "$TEMP_CRON"
    echo "$GEOIP_UPDATE_SCHEDULE $CRON_CMD" >> "$TEMP_CRON"
    
    # Install new crontab
    crontab "$TEMP_CRON"
    rm -f "$TEMP_CRON"
    
    # Start cron service if not running
    if command_exists service; then
        service cron status >/dev/null 2>&1 || service cron start
        echo "[Setup] Cron service started"
    elif command_exists systemctl; then
        systemctl is-active cron >/dev/null 2>&1 || systemctl start cron
        echo "[Setup] Cron service started via systemctl"
    else
        echo "[Setup] WARNING: Could not verify cron service status"
    fi
    
    echo "[Setup] ✅ Cron configured"
    cron_configured=true
fi

# Option 4: Systemd timer (for host systems)
if [ -d /etc/systemd/system ] && command_exists systemctl && [ "$cron_configured" = "false" ]; then
    echo "[Setup] Detected systemd, creating timer..."
    
    # Create service unit
    cat > /etc/systemd/system/geoip-update.service <<EOF
[Unit]
Description=Update GeoIP Databases
After=network-online.target
Wants=network-online.target

[Service]
Type=oneshot
ExecStart=/opt/geoip/geoip-update.sh --api-key '$GEOIP_API_KEY' --endpoint '$GEOIP_API_ENDPOINT' --directory '$GEOIP_TARGET_DIR' --quiet
StandardOutput=journal
StandardError=journal
User=nobody
Group=nogroup

# Restart policy
Restart=on-failure
RestartSec=300

# Security hardening
PrivateTmp=yes
NoNewPrivileges=true
ProtectSystem=strict
ProtectHome=true
ReadWritePaths=$GEOIP_TARGET_DIR
EOF

    # Create timer unit
    cat > /etc/systemd/system/geoip-update.timer <<EOF
[Unit]
Description=Update GeoIP Databases Daily
Requires=geoip-update.service

[Timer]
# Run at 2 AM daily (systemd doesn't use cron syntax)
OnCalendar=daily
OnCalendar=*-*-* 02:00:00
Persistent=true

[Install]
WantedBy=timers.target
EOF

    # Reload systemd and enable timer
    systemctl daemon-reload
    systemctl enable geoip-update.timer
    systemctl start geoip-update.timer
    
    echo "[Setup] ✅ Systemd timer configured and started"
    echo "[Setup] Check status with: systemctl status geoip-update.timer"
    cron_configured=true
fi

# Option 5: Simple crontab file creation (fallback)
if [ "$cron_configured" = "false" ]; then
    echo "[Setup] No supported cron system detected, creating crontab file..."
    
    # Create a standard crontab file that can be installed manually
    CRONTAB_FILE="/etc/crontab.geoip"
    cat > "$CRONTAB_FILE" <<EOF
# GeoIP Database Update Crontab
# Install with: crontab $CRONTAB_FILE
# Or add to system crontab: cat $CRONTAB_FILE >> /etc/crontab

# Update GeoIP databases daily at 2 AM
$GEOIP_UPDATE_SCHEDULE $CRON_CMD

EOF
    
    echo "[Setup] ⚠️  WARNING: No automatic cron system found!"
    echo "[Setup] A crontab file has been created at: $CRONTAB_FILE"
    echo "[Setup] To enable automatic updates, install it manually:"
    echo "[Setup]   For user crontab: crontab $CRONTAB_FILE"
    echo "[Setup]   For system crontab: cat $CRONTAB_FILE >> /etc/crontab"
    echo ""
    echo "[Setup] Alternatively, run updates manually:"
    echo "[Setup]   /opt/geoip/geoip-update.sh"
fi

# Final status
if [ "$cron_configured" = "true" ]; then
    echo ""
    echo "[Setup] ✅ Automatic GeoIP updates configured successfully!"
    echo "[Setup] Updates will run according to schedule: $GEOIP_UPDATE_SCHEDULE"
    echo "[Setup] Logs will be written to: $CRON_LOG_FILE"
    
    # Test run
    echo ""
    echo "[Setup] To test the update now, run:"
    echo "  /opt/geoip/geoip-update.sh --api-key '$GEOIP_API_KEY' --directory '$GEOIP_TARGET_DIR'"
else
    echo ""
    echo "[Setup] ⚠️  Automatic updates require manual configuration"
    exit 1
fi