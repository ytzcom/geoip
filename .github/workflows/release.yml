name: Unified Release

on:
  push:
    tags:
      - 'v*'
      - 'go-v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'
  workflow_run:
    workflows: ["Build and Push Docker Images"]
    types:
      - completed

permissions:
  contents: write
  packages: write
  actions: read

env:
  DOCKER_REGISTRY: docker.io
  DOCKER_NAMESPACE: ytzcom

jobs:
  # Wait for docker workflow to complete when triggered by tag push
  wait-for-docker:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Wait for Docker workflow
        uses: lewagon/wait-on-check-action@v1.3.1
        with:
          ref: ${{ github.ref }}
          check-name: 'notification'  # Final job in docker workflow
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 30
  build-binaries:
    name: Build Go Binaries
    runs-on: ubuntu-latest
    needs: [wait-for-docker]
    if: always() && (needs.wait-for-docker.result == 'success' || needs.wait-for-docker.result == 'skipped')
    strategy:
      matrix:
        include:
          # Linux builds
          - os: linux
            arch: amd64
            output: geoip-updater-linux-amd64
          - os: linux
            arch: arm64
            output: geoip-updater-linux-arm64
          - os: linux
            arch: arm
            arm: 7
            output: geoip-updater-linux-arm
          # macOS builds
          - os: darwin
            arch: amd64
            output: geoip-updater-darwin-amd64
          - os: darwin
            arch: arm64
            output: geoip-updater-darwin-arm64
          # Windows builds
          - os: windows
            arch: amd64
            output: geoip-updater-windows-amd64.exe
          - os: windows
            arch: arm64
            output: geoip-updater-windows-arm64.exe
          # FreeBSD build
          - os: freebsd
            arch: amd64
            output: geoip-updater-freebsd-amd64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache: false

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          # Remove 'go-' prefix if present
          VERSION="${VERSION#go-}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Building version: ${VERSION}"

      - name: Build binary
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
          GOARM: ${{ matrix.arm }}
        run: |
          cd cli/go
          
          # Build the binary (flags inline to avoid shell expansion issues)
          echo "Building for ${{ matrix.os }}/${{ matrix.arch }}..."
          if [ -n "${{ matrix.arm }}" ]; then
            echo "  ARM version: ${{ matrix.arm }}"
          fi
          
          go build \
            -ldflags="-s -w -X main.version=${{ steps.version.outputs.version }}" \
            -trimpath \
            -o ../../${{ matrix.output }} \
            .
          
          # Make executable (except Windows)
          if [ "${{ matrix.os }}" != "windows" ]; then
            chmod +x ../../${{ matrix.output }}
          fi
          
          # Show file info
          ls -lh ../../${{ matrix.output }}

      - name: Compress binary
        run: |
          # Use gzip for better compatibility
          gzip -9 -k ${{ matrix.output }}
          
          # Also create tar.gz archive
          tar -czf ${{ matrix.output }}.tar.gz ${{ matrix.output }}
          
          # Show compressed sizes
          echo "Compressed files:"
          ls -lh ${{ matrix.output }}*

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.output }}
          path: |
            ${{ matrix.output }}
            ${{ matrix.output }}.gz
            ${{ matrix.output }}.tar.gz

  create-release:
    name: Create Unified Release
    needs: build-binaries
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          # Remove 'go-' prefix if present
          VERSION="${VERSION#go-}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Release version: ${VERSION}"

      - name: Check if release exists
        id: check-release
        run: |
          # Check if release already exists (e.g., manual release)
          if gh release view "${{ steps.version.outputs.version }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Release ${{ steps.version.outputs.version }} already exists"
            # Get existing release body for preservation
            gh release view "${{ steps.version.outputs.version }}" --json body --jq '.body' > existing-release-body.md || echo "" > existing-release-body.md
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Release ${{ steps.version.outputs.version }} does not exist"
            echo "" > existing-release-body.md
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download Go binary artifacts
        uses: actions/download-artifact@v4
        with:
          path: binaries/
          pattern: binary-*

      - name: Download Docker workflow SBOMs
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: release-sboms
          path: ./sboms/

      - name: Prepare release assets
        run: |
          # Create release directory
          mkdir -p release
          
          # Move all Go binaries to release directory
          for dir in binaries/binary-*; do
            if [ -d "$dir" ]; then
              mv $dir/* release/ 2>/dev/null || true
            fi
          done
          
          # Add SBOMs if available
          if [ -d "./sboms" ] && [ "$(ls -A ./sboms)" ]; then
            mv ./sboms/*.json release/ 2>/dev/null || true
          fi
          
          # List all release files
          echo "Release assets:"
          ls -lh release/

      - name: Generate checksums
        run: |
          cd release
          
          # Generate SHA256 checksums for binaries
          if ls geoip-updater-* 1> /dev/null 2>&1; then
            sha256sum geoip-updater-* > checksums-sha256.txt
            md5sum geoip-updater-* > checksums-md5.txt
            
            echo "SHA256 checksums:"
            cat checksums-sha256.txt
            echo ""
            echo "MD5 checksums:"
            cat checksums-md5.txt
          else
            echo "No binaries found to checksum"
            touch checksums-sha256.txt checksums-md5.txt
          fi

      - name: Create unified release notes
        run: |
          # Start with existing content if release exists
          if [ -s existing-release-body.md ]; then
            echo "## Existing Release Content" > release-notes.md
            echo "" >> release-notes.md
            cat existing-release-body.md >> release-notes.md
            echo "" >> release-notes.md
            echo "---" >> release-notes.md
            echo "" >> release-notes.md
          fi
          
          # Add unified release content
          cat >> release-notes.md << EOF
          ## GeoIP Updater Release ${{ steps.version.outputs.version }}
          
          This is a unified release containing both Go binaries and Docker images.
          
          ### 🐳 Docker Images
          
          Pull the latest Docker images for this release:
          
          #### Integration Image
          \`\`\`bash
          # Scripts-only image for easy integration (2-line Docker integration!)
          docker pull ${{ env.DOCKER_NAMESPACE }}/geoip-scripts:${{ steps.version.outputs.version }}
          \`\`\`
          
          #### CLI Client Images
          \`\`\`bash
          # Python CLI version
          docker pull ${{ env.DOCKER_NAMESPACE }}/geoip-updater:${{ steps.version.outputs.version }}
          
          # Cron version with supercronic
          docker pull ${{ env.DOCKER_NAMESPACE }}/geoip-updater-cron:${{ steps.version.outputs.version }}
          
          # Kubernetes optimized version
          docker pull ${{ env.DOCKER_NAMESPACE }}/geoip-updater-k8s:${{ steps.version.outputs.version }}
          
          # Go binary version
          docker pull ${{ env.DOCKER_NAMESPACE }}/geoip-updater-go:${{ steps.version.outputs.version }}
          \`\`\`
          
          #### API Server Images
          \`\`\`bash
          # FastAPI server with S3 backend
          docker pull ${{ env.DOCKER_NAMESPACE }}/geoip-api:${{ steps.version.outputs.version }}
          
          # Production server with Nginx reverse proxy
          docker pull ${{ env.DOCKER_NAMESPACE }}/geoip-api-nginx:${{ steps.version.outputs.version }}
          
          # Development server with debug features
          docker pull ${{ env.DOCKER_NAMESPACE }}/geoip-api-dev:${{ steps.version.outputs.version }}
          \`\`\`
          
          ### 📦 Go Binary Downloads
          
          Download the appropriate binary for your platform:
          
          #### Linux
          - \`geoip-updater-linux-amd64\` - Linux x86_64
          - \`geoip-updater-linux-arm64\` - Linux ARM64
          - \`geoip-updater-linux-arm\` - Linux ARM v7
          
          #### macOS
          - \`geoip-updater-darwin-amd64\` - macOS Intel
          - \`geoip-updater-darwin-arm64\` - macOS Apple Silicon (M1/M2)
          
          #### Windows
          - \`geoip-updater-windows-amd64.exe\` - Windows x86_64
          - \`geoip-updater-windows-arm64.exe\` - Windows ARM64
          
          #### Other
          - \`geoip-updater-freebsd-amd64\` - FreeBSD x86_64
          
          ### 🔒 Verification
          
          #### Docker Images
          All Docker images are signed using keyless signing with Sigstore:
          \`\`\`bash
          # Verify any image (example with CLI image)
          cosign verify \\
            --certificate-identity "https://github.com/${{ github.repository }}/.github/workflows/docker-build.yml@${{ github.ref }}" \\
            --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \\
            ${{ env.DOCKER_NAMESPACE }}/geoip-updater:${{ steps.version.outputs.version }}
          \`\`\`
          
          #### Go Binaries
          Verify your binary download using the provided checksums:
          \`\`\`bash
          # Verify SHA256
          sha256sum -c checksums-sha256.txt
          
          # Verify MD5
          md5sum -c checksums-md5.txt
          \`\`\`
          
          ### 📊 File Formats
          
          Each binary is available in three formats:
          - **Uncompressed**: Direct executable
          - **Gzip** (\`.gz\`): Single file compression
          - **Tar.gz** (\`.tar.gz\`): Archive format
          
          ### 🚀 Quick Start
          
          #### Docker
          \`\`\`bash
          # Run with Docker (easiest)
          docker run --rm ${{ env.DOCKER_NAMESPACE }}/geoip-updater:${{ steps.version.outputs.version }} --version
          \`\`\`
          
          #### Go Binary
          \`\`\`bash
          # Download for your platform (example: Linux AMD64)
          curl -LO https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/geoip-updater-linux-amd64
          
          # Make executable
          chmod +x geoip-updater-linux-amd64
          
          # Run
          ./geoip-updater-linux-amd64 --version
          \`\`\`
          
          ### 📄 Additional Files
          
          This release also includes:
          - Software Bill of Materials (SBOM) files for all Docker images
          - SHA256 and MD5 checksums for all binaries
          
          ### 📝 Changelog
          
          See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details.
          EOF

      - name: Create or Update GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          body_path: release-notes.md
          draft: false
          prerelease: false
          # Append files to existing release or create new release
          files: |
            release/geoip-updater-*
            release/checksums-*.txt
            release/*.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-binaries:
    name: Test Binaries
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            binary: geoip-updater-linux-amd64
          - os: macos-latest
            binary: geoip-updater-darwin-amd64
          - os: windows-latest
            binary: geoip-updater-windows-amd64.exe
    
    steps:
      - name: Get version
        id: version
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          # Remove 'go-' prefix if present
          VERSION="${VERSION#go-}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Download binary from release
        shell: bash
        run: |
          # Wait a moment for release to be available
          sleep 5
          
          # Download the binary
          curl -LO "https://github.com/ytzcom/geoip/releases/download/${{ steps.version.outputs.version }}/${{ matrix.binary }}"
          
          # Make executable (except Windows)
          if [ "${{ runner.os }}" != "Windows" ]; then
            chmod +x ${{ matrix.binary }}
          fi

      - name: Test binary
        shell: bash
        run: |
          # Test version command
          ./${{ matrix.binary }} --version
          
          # Test help command
          ./${{ matrix.binary }} --help
          
          # Test list databases (doesn't require API key)
          ./${{ matrix.binary }} --list-databases || true