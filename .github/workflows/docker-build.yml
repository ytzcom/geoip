name: Docker CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    paths:
      - 'cli/**'
      - 'api-server/**'
      - '.github/workflows/docker-build.yml'
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild without cache'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
  schedule:
    # Weekly rebuild for security updates (Sunday at 2 AM UTC)
    - cron: '0 2 * * 0'

env:
  DOCKER_REGISTRY: docker.io
  DOCKER_NAMESPACE: ytzcom
  PLATFORMS: linux/amd64,linux/arm64

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tags: ${{ steps.meta.outputs.tags }}
      labels: ${{ steps.meta.outputs.labels }}
      cache-key: ${{ steps.cache.outputs.key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/heads/main ]]; then
            VERSION=latest
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            VERSION=pr-${{ github.event.pull_request.number }}
          else
            VERSION=dev
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"

      - name: Generate cache key
        id: cache
        run: |
          echo "key=docker-${{ runner.os }}-${{ hashFiles('cli/python/requirements.txt', 'cli/go/go.mod', 'api-server/requirements.txt') }}" >> $GITHUB_OUTPUT

  build-matrix:
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        include:
          # Scripts-Only Image for Integration
          - name: geoip-scripts
            context: .
            dockerfile: docker-scripts/Dockerfile
            description: "GeoIP scripts-only image for easy Docker integration"
            category: scripts
            
          # CLI Client Images
          - name: geoip-updater
            context: ./cli/python
            dockerfile: Dockerfile
            description: "GeoIP database updater - Python CLI"
            category: cli
            
          - name: geoip-updater-cron
            context: ./cli
            dockerfile: python-cron/Dockerfile
            description: "GeoIP database updater - Secure Cron with supercronic"
            category: cli
            
          - name: geoip-updater-k8s
            context: ./cli
            dockerfile: python-k8s/Dockerfile
            description: "GeoIP database updater - Kubernetes optimized"
            category: cli
            
          - name: geoip-updater-go
            context: ./cli/go
            dockerfile: Dockerfile
            description: "GeoIP database updater - Go binary"
            category: cli

          # API Server Images
          - name: geoip-api
            context: ./api-server
            dockerfile: Dockerfile
            description: "GeoIP Authentication API Server - FastAPI with S3 backend"
            category: api
            
          - name: geoip-api-nginx
            context: ./api-server
            dockerfile: Dockerfile.nginx
            description: "GeoIP Authentication API Server - Production with Nginx reverse proxy"
            category: api
            
          - name: geoip-api-dev
            context: ./api-server
            dockerfile: Dockerfile.dev
            description: "GeoIP Authentication API Server - Development with debug features"
            category: api

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
        # Retry on failure (network issues, rate limits)
        id: docker-login
        continue-on-error: true

      - name: Retry Docker Hub login
        if: github.event_name != 'pull_request' && steps.docker-login.outcome == 'failure'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/${{ matrix.name }}
          # Optimized tagging strategy for CI/CD builds:
          # - Branch builds get branch name (main → latest)
          # - PR builds get pr-<number> tag
          # - Manual/scheduled builds get appropriate tags
          tags: |
            type=ref,event=branch
            type=ref,event=pr,prefix=pr-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=develop,enable=${{ github.ref == 'refs/heads/develop' }}
            type=raw,value=weekly,enable=${{ github.event_name == 'schedule' }}
          labels: |
            org.opencontainers.image.title=${{ matrix.name }}
            org.opencontainers.image.description=${{ matrix.description }}
            org.opencontainers.image.vendor=YTZ
            org.opencontainers.image.category=${{ matrix.category }}
            org.opencontainers.image.documentation=https://github.com/ytzcom/geoip-updater/blob/main/${{ matrix.category == 'api' && 'api-server' || matrix.category == 'scripts' && 'docker-scripts' || 'cli/python' }}/README.md
            maintainer=YTZ

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        id: build
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.context }}/${{ matrix.dockerfile }}
          platforms: ${{ env.PLATFORMS }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha,scope=${{ matrix.name }}
            type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/${{ matrix.name }}:buildcache
          cache-to: |
            type=gha,mode=max,scope=${{ matrix.name }}
            type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/${{ matrix.name }}:buildcache,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            VERSION=${{ needs.setup.outputs.version }}
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] || github.event.head_commit.timestamp || github.event.repository.updated_at }}
            VCS_REF=${{ github.sha }}
          no-cache: ${{ github.event.inputs.force_rebuild == 'true' }}

      - name: Generate SBOM (with retry)
        if: github.event_name != 'pull_request'
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 5
          max_attempts: 3
          retry_wait_seconds: 15
          command: |
            # Use anchore/sbom-action via Docker to generate SBOM
            docker run --rm -v "$PWD":/workspace \
              anchore/syft:latest \
              ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/${{ matrix.name }}:${{ needs.setup.outputs.version }} \
              -o spdx-json=/workspace/${{ matrix.name }}-sbom.spdx.json

      - name: Upload SBOM
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ matrix.name }}
          path: ${{ matrix.name }}-sbom.spdx.json
          retention-days: 30

      - name: Run Trivy vulnerability scanner
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/${{ matrix.name }}:${{ needs.setup.outputs.version }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.name }}.sarif'
          severity: 'CRITICAL,HIGH'
          timeout: '10m'

      - name: Upload Trivy scan results
        if: github.event_name != 'pull_request'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results-${{ matrix.name }}.sarif'
          category: 'trivy-${{ matrix.name }}'

      - name: Docker Scout CVE scan
        if: github.event_name != 'pull_request'
        continue-on-error: true
        uses: docker/scout-action@v1
        with:
          command: cves
          image: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/${{ matrix.name }}:${{ needs.setup.outputs.version }}
          sarif-file: scout-results-${{ matrix.name }}.sarif
          summary: true

  update-docker-hub-description:
    runs-on: ubuntu-latest
    needs: [setup, build-matrix]
    if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update Docker Hub Description
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          repository: ${{ env.DOCKER_NAMESPACE }}/geoip-updater
          readme-filepath: ./cli/python/README.md
          short-description: "GeoIP database updater with support for MaxMind and IP2Location"

  # Image signing and SBOM collection have been moved to the unified release.yml workflow
  # This workflow now focuses on CI/CD builds for development and PRs

  notification:
    runs-on: ubuntu-latest
    needs: [setup, build-matrix]
    if: always() && github.event_name != 'pull_request'
    steps:
      - name: Create job summary
        run: |
          echo "## Docker Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.build-matrix.result }}" == "success" ]; then
            echo "✅ **Status**: All Docker images built and pushed successfully" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Integration Image" >> $GITHUB_STEP_SUMMARY
            echo "- \`${{ env.DOCKER_NAMESPACE }}/geoip-scripts:${{ needs.setup.outputs.version || 'latest' }}\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### CLI Client Images" >> $GITHUB_STEP_SUMMARY
            echo "- \`${{ env.DOCKER_NAMESPACE }}/geoip-updater:${{ needs.setup.outputs.version || 'latest' }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- \`${{ env.DOCKER_NAMESPACE }}/geoip-updater-cron:${{ needs.setup.outputs.version || 'latest' }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- \`${{ env.DOCKER_NAMESPACE }}/geoip-updater-k8s:${{ needs.setup.outputs.version || 'latest' }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- \`${{ env.DOCKER_NAMESPACE }}/geoip-updater-go:${{ needs.setup.outputs.version || 'latest' }}\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### API Server Images" >> $GITHUB_STEP_SUMMARY
            echo "- \`${{ env.DOCKER_NAMESPACE }}/geoip-api:${{ needs.setup.outputs.version || 'latest' }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- \`${{ env.DOCKER_NAMESPACE }}/geoip-api-nginx:${{ needs.setup.outputs.version || 'latest' }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- \`${{ env.DOCKER_NAMESPACE }}/geoip-api-dev:${{ needs.setup.outputs.version || 'latest' }}\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Status**: Docker image build failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Troubleshooting Steps" >> $GITHUB_STEP_SUMMARY
            echo "1. Check the [workflow logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
            echo "2. Verify Docker Hub credentials are valid" >> $GITHUB_STEP_SUMMARY
            echo "3. Check if any Dockerfile has syntax errors" >> $GITHUB_STEP_SUMMARY
            echo "4. Ensure all base images are accessible" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow Run**: [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Actor**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🧹 Docker Hub Cleanup" >> $GITHUB_STEP_SUMMARY
          echo "Automatic cleanup runs weekly to remove old PR and SHA tags." >> $GITHUB_STEP_SUMMARY
          echo "- **Next Cleanup**: Every Sunday at 2:00 AM UTC" >> $GITHUB_STEP_SUMMARY
          echo "- **Manual Trigger**: [Docker Hub Cleanup Workflow](${{ github.server_url }}/${{ github.repository }}/actions/workflows/docker-cleanup.yml)" >> $GITHUB_STEP_SUMMARY
          echo "- **Documentation**: [Cleanup Configuration](docs/DOCKER_CLEANUP.md)" >> $GITHUB_STEP_SUMMARY
          
      - name: Send notification
        run: |
          if [ "${{ needs.build-matrix.result }}" == "success" ]; then
            echo "✅ Docker images built and pushed successfully"
          else
            echo "❌ Docker image build failed"
            exit 1
          fi