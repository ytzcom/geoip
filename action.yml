name: 'GeoIP Database Cache'
description: 'Download and cache GeoIP databases using the official GeoIP updater binary'
author: 'YTZ'
branding:
  icon: 'globe'
  color: 'blue'

inputs:
  api-key:
    description: 'API key for accessing GeoIP databases'
    required: true
  path:
    description: 'Path to store GeoIP databases'
    required: false
    default: './geoip'
  databases:
    description: 'Comma-separated list of databases to download (or "all")'
    required: false
    default: 'all'
  cache-key-prefix:
    description: 'Prefix for cache key'
    required: false
    default: 'geoip'
  cache-refresh:
    description: 'Cache refresh period: daily, weekly, monthly'
    required: false
    default: 'weekly'
  auth-endpoint:
    description: 'Authentication endpoint URL'
    required: false
    default: 'https://geoipdb.net/auth'
  validate:
    description: 'Validate downloaded files'
    required: false
    default: 'true'
  fail-on-error:
    description: 'Fail the action if download or validation fails'
    required: false
    default: 'true'
  timeout:
    description: 'Download timeout duration (e.g., 5m, 300s)'
    required: false
    default: '5m'
  concurrent:
    description: 'Maximum concurrent downloads'
    required: false
    default: '4'
  quiet:
    description: 'Suppress non-essential output'
    required: false
    default: 'false'

outputs:
  cache-hit:
    description: 'Whether cache was hit'
    value: ${{ steps.cache.outputs.cache-hit }}
  path:
    description: 'Path where databases are stored'
    value: ${{ inputs.path }}
  databases-downloaded:
    description: 'List of databases that were downloaded'
    value: ${{ steps.go-binary.outputs.databases || steps.cache-list.outputs.databases }}
  binary-version:
    description: 'Version of the GeoIP updater binary used'
    value: ${{ steps.go-binary.outputs.version }}

runs:
  using: 'composite'
  steps:
    - name: Detect platform and binary name
      id: platform
      shell: bash
      run: |
        echo "🔍 Detecting runner platform..."
        
        # Detect OS and architecture
        case "${{ runner.os }}" in
          Linux)
            OS="linux"
            ;;
          macOS)
            OS="darwin"
            ;;
          Windows)
            OS="windows"
            ;;
          *)
            echo "❌ Unsupported OS: ${{ runner.os }}"
            exit 1
            ;;
        esac
        
        # Detect architecture (GitHub runners are amd64 except macOS 14+ which is arm64)
        case "${{ runner.os }}-${{ runner.arch }}" in
          macOS-ARM64|macOS-arm64)
            ARCH="arm64"
            ;;
          *)
            ARCH="amd64"
            ;;
        esac
        
        # Construct binary name
        if [ "$OS" = "windows" ]; then
          BINARY_NAME="geoip-updater-${OS}-${ARCH}.exe"
        else
          BINARY_NAME="geoip-updater-${OS}-${ARCH}"
        fi
        
        # Set outputs
        echo "os=${OS}" >> $GITHUB_OUTPUT
        echo "arch=${ARCH}" >> $GITHUB_OUTPUT
        echo "binary-name=${BINARY_NAME}" >> $GITHUB_OUTPUT
        echo "binary-path=./geoip-binary/${BINARY_NAME}" >> $GITHUB_OUTPUT
        
        echo "✅ Platform: ${OS}/${ARCH} → ${BINARY_NAME}"

    - name: Generate cache keys
      id: cache-key
      shell: bash
      run: |
        # Generate cache keys for both databases and binary
        case "${{ inputs.cache-refresh }}" in
          daily)
            DB_CACHE_KEY="${{ inputs.cache-key-prefix }}-db-${{ runner.os }}-$(date +%Y-%j)"
            ;;
          weekly)
            DB_CACHE_KEY="${{ inputs.cache-key-prefix }}-db-${{ runner.os }}-$(date +%Y-W%V)"
            ;;
          monthly)
            DB_CACHE_KEY="${{ inputs.cache-key-prefix }}-db-${{ runner.os }}-$(date +%Y-%m)"
            ;;
          *)
            echo "Invalid cache-refresh value: ${{ inputs.cache-refresh }}"
            exit 1
            ;;
        esac
        
        # Binary cache key (monthly refresh is fine for binaries)
        BINARY_CACHE_KEY="${{ inputs.cache-key-prefix }}-binary-${{ steps.platform.outputs.binary-name }}-$(date +%Y-%m)"
        
        # Set environment variables and outputs
        echo "DB_CACHE_KEY=$DB_CACHE_KEY" >> $GITHUB_ENV
        echo "BINARY_CACHE_KEY=$BINARY_CACHE_KEY" >> $GITHUB_ENV
        echo "db-cache-key=$DB_CACHE_KEY" >> $GITHUB_OUTPUT
        echo "binary-cache-key=$BINARY_CACHE_KEY" >> $GITHUB_OUTPUT
        echo "📅 Cache keys: DB=$DB_CACHE_KEY | Binary=$BINARY_CACHE_KEY"

    - name: Check database cache
      id: cache
      uses: actions/cache@v4
      with:
        path: ${{ inputs.path }}
        key: ${{ env.DB_CACHE_KEY }}
        enableCrossOsArchive: true

    - name: Check binary cache
      id: binary-cache
      uses: actions/cache@v4
      with:
        path: ./geoip-binary
        key: ${{ env.BINARY_CACHE_KEY }}
        enableCrossOsArchive: true

    - name: List cached databases
      id: cache-list
      if: steps.cache.outputs.cache-hit == 'true'
      shell: bash
      run: |
        echo "✅ Using cached GeoIP databases"
        if [ -d "${{ inputs.path }}" ]; then
          DATABASES=$(ls -1 "${{ inputs.path }}" | grep -E '\.(mmdb|BIN)$' | tr '\n' ',' | sed 's/,$//')
          echo "databases=$DATABASES" >> $GITHUB_OUTPUT
          echo "📦 Cached databases: $DATABASES"
        fi

    - name: Download Go binary
      if: steps.binary-cache.outputs.cache-hit != 'true'
      shell: bash
      run: |
        echo "📥 Downloading GeoIP updater binary..."
        mkdir -p ./geoip-binary
        
        # Try to download from GitHub releases
        DOWNLOAD_URL="https://github.com/ytzcom/geoip/releases/latest/download/${{ steps.platform.outputs.binary-name }}"
        
        echo "⏳ Attempting to download from: $DOWNLOAD_URL"
        if curl -L -f -o "${{ steps.platform.outputs.binary-path }}" "$DOWNLOAD_URL" --connect-timeout 30 --max-time 120 2>/dev/null; then
          chmod +x "${{ steps.platform.outputs.binary-path }}"
          echo "✅ Downloaded and made executable: ${{ steps.platform.outputs.binary-name }}"
        else
          echo "⚠️  Binary not found in releases, attempting fallback to build from source..."
          
          # Fallback: Build from source if Go is available
          if command -v go >/dev/null 2>&1; then
            echo "🔨 Building binary from source..."
            
            # Clone or use local repository
            if [ ! -d "./cli/go" ]; then
              echo "📦 Cloning repository..."
              git clone --depth 1 https://github.com/ytzcom/geoip.git geoip-source
              cd geoip-source/cli/go
            else
              cd ./cli/go
            fi
            
            # Build the binary
            GOOS="${{ steps.platform.outputs.os }}" \
            GOARCH="${{ steps.platform.outputs.arch }}" \
            go build -ldflags="-s -w" -trimpath -o "../../../${{ steps.platform.outputs.binary-path }}" .
            
            cd ../../../
            chmod +x "${{ steps.platform.outputs.binary-path }}"
            echo "✅ Successfully built binary from source"
            
            # Clean up if we cloned
            rm -rf geoip-source 2>/dev/null || true
          else
            echo "❌ Failed to download binary and Go is not available for building from source"
            echo ""
            echo "To resolve this issue:"
            echo "1. Wait for the next release to be published"
            echo "2. Or ensure Go 1.21+ is installed on the runner"
            echo "3. Or create a release using: workflow_dispatch on release-go-binaries.yml"
            echo ""
            echo "For now, the action will attempt to continue with limited functionality..."
            
            # Create a stub script that will fail gracefully
            cat > "${{ steps.platform.outputs.binary-path }}" << 'EOF'
        #!/bin/sh
        echo "❌ GeoIP updater binary not available"
        echo "The binary could not be downloaded or built."
        echo "Please check the action logs for more details."
        exit 1
        EOF
            chmod +x "${{ steps.platform.outputs.binary-path }}"
            
            if [ "${{ inputs.fail-on-error }}" = "true" ]; then
              exit 1
            fi
          fi
        fi

    - name: Save binary to cache
      if: steps.binary-cache.outputs.cache-hit != 'true'
      uses: actions/cache/save@v4
      with:
        path: ./geoip-binary
        key: ${{ env.BINARY_CACHE_KEY }}
        enableCrossOsArchive: true

    - name: Run GeoIP updater
      id: go-binary
      if: steps.cache.outputs.cache-hit != 'true'
      shell: bash
      run: |
        echo "🌍 Running GeoIP updater binary..."
        
        # Ensure target directory exists
        mkdir -p "${{ inputs.path }}"
        
        # Build command arguments
        ARGS=(
          "--api-key" "${{ inputs.api-key }}"
          "--endpoint" "${{ inputs.auth-endpoint }}"
          "--directory" "${{ inputs.path }}"
          "--databases" "${{ inputs.databases }}"
          "--timeout" "${{ inputs.timeout }}"
          "--concurrent" "${{ inputs.concurrent }}"
        )
        
        # Add conditional flags
        if [ "${{ inputs.quiet }}" = "true" ]; then
          ARGS+=("--quiet")
        fi
        
        # Add validation flag if requested
        if [ "${{ inputs.validate }}" = "true" ]; then
          ARGS+=("--verbose")  # Verbose output helps with validation parsing
        fi
        
        # Run the binary
        BINARY_PATH="${{ steps.platform.outputs.binary-path }}"
        if [ ! -x "$BINARY_PATH" ]; then
          echo "❌ Binary not found or not executable: $BINARY_PATH"
          if [ "${{ inputs.fail-on-error }}" = "true" ]; then
            exit 1
          fi
        fi
        
        # Execute binary and capture output
        if OUTPUT=$("$BINARY_PATH" "${ARGS[@]}" 2>&1); then
          echo "✅ GeoIP updater completed successfully"
          
          # Parse output for downloaded databases (look for success messages)
          if DATABASES=$(echo "$OUTPUT" | grep -o 'Downloaded: [^[:space:]]*' | sed 's/Downloaded: //' | tr '\n' ',' | sed 's/,$//' 2>/dev/null); then
            if [ -n "$DATABASES" ]; then
              echo "databases=$DATABASES" >> $GITHUB_OUTPUT
              echo "📊 Downloaded databases: $DATABASES"
            fi
          fi
          
          # Alternative: list actual files in the directory
          if [ -z "$DATABASES" ] && [ -d "${{ inputs.path }}" ]; then
            ACTUAL_DATABASES=$(ls -1 "${{ inputs.path }}" 2>/dev/null | grep -E '\.(mmdb|BIN)$' | tr '\n' ',' | sed 's/,$//' || echo "")
            if [ -n "$ACTUAL_DATABASES" ]; then
              echo "databases=$ACTUAL_DATABASES" >> $GITHUB_OUTPUT
              echo "📊 Found databases: $ACTUAL_DATABASES"
            fi
          fi
          
          # Get version info
          if VERSION=$("$BINARY_PATH" --version 2>/dev/null | head -1); then
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "📋 Binary version: $VERSION"
          fi
          
          # Show output if not quiet
          if [ "${{ inputs.quiet }}" != "true" ]; then
            echo "$OUTPUT"
          fi
        else
          echo "❌ GeoIP updater failed:"
          echo "$OUTPUT"
          if [ "${{ inputs.fail-on-error }}" = "true" ]; then
            exit 1
          fi
        fi

    - name: Save databases to cache
      if: steps.cache.outputs.cache-hit != 'true' && steps.go-binary.outcome == 'success'
      uses: actions/cache/save@v4
      with:
        path: ${{ inputs.path }}
        key: ${{ env.DB_CACHE_KEY }}
        enableCrossOsArchive: true

    - name: Summary
      if: always()
      shell: bash
      run: |
        echo "## 🌍 GeoIP Database Cache Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Cache Key**: ${{ env.DB_CACHE_KEY }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Cache Hit**: ${{ steps.cache.outputs.cache-hit || 'false' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Path**: ${{ inputs.path }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Platform**: ${{ steps.platform.outputs.os }}/${{ steps.platform.outputs.arch }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Binary**: ${{ steps.platform.outputs.binary-name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ steps.go-binary.outputs.version || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Databases**: ${{ steps.go-binary.outputs.databases || steps.cache-list.outputs.databases || 'None' }}" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.cache.outputs.cache-hit }}" = "true" ]; then
          echo "- **Status**: ✅ Using cached databases" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ steps.go-binary.outcome }}" = "success" ]; then
          echo "- **Status**: ✅ Downloaded and cached databases using Go binary" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Status**: ❌ Failed to download databases" >> $GITHUB_STEP_SUMMARY
        fi